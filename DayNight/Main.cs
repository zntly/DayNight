using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using Home.Shared;
using Newtonsoft.Json;
using Server.Shared.Extensions;
using Services;
using SML;
using System.Linq;
using UnityEngine;
using UnityEngine.SceneManagement;
using System.Text.RegularExpressions;

namespace DayNight
{
    // Token: 0x02000007 RID: 7
    [Mod.SalemMod]
    public class Main
    {
        // Token: 0x06000009 RID: 9
        public void Start()
        {
            AssetBundle assetBundleFromResources = FromAssetBundle.GetAssetBundleFromResources("DayNight.resources.assetbundles.daynight", Assembly.GetExecutingAssembly());
            assetBundleFromResources.LoadAllAssets<Texture2D>().ForEach(delegate (Texture2D s)
            {
                Main.Textures.Add(s.name, s);
            });
            if (assetBundleFromResources != null)
            {
                assetBundleFromResources.Unload(false);
            }
            string directory = Path.GetDirectoryName(Application.dataPath) + "/SalemModLoader/ModFolders/CustomSkybox";
            if (!Directory.Exists(directory))
            {
                Directory.CreateDirectory(directory);
                Texture2D duplicateTexture(Texture2D source)
                {
                    RenderTexture renderTex = RenderTexture.GetTemporary(
                                source.width,
                                source.height,
                                0,
                                RenderTextureFormat.Default,
                                RenderTextureReadWrite.Linear);

                    Graphics.Blit(source, renderTex);
                    RenderTexture previous = RenderTexture.active;
                    RenderTexture.active = renderTex;
                    Texture2D readableText = new Texture2D(source.width, source.height);
                    readableText.ReadPixels(new Rect(0, 0, renderTex.width, renderTex.height), 0, 0);
                    readableText.Apply();
                    RenderTexture.active = previous;
                    RenderTexture.ReleaseTemporary(renderTex);
                    return readableText;
                }
                byte[] daySkybox = duplicateTexture(Main.Textures["Skybox_Gradient_Day"]).EncodeToPNG();
                byte[] cloud1 = duplicateTexture(Main.Textures["Day_Cloud_1"]).EncodeToPNG();
                byte[] cloud2 = duplicateTexture(Main.Textures["Day_Cloud_2"]).EncodeToPNG();
                byte[] cloud3 = duplicateTexture(Main.Textures["Day_Cloud_3"]).EncodeToPNG();
                byte[] cloud4 = duplicateTexture(Main.Textures["Day_Cloud_4"]).EncodeToPNG();
                byte[] cloud5 = duplicateTexture(Main.Textures["Day_Cloud_5"]).EncodeToPNG();
                byte[] cloud6 = duplicateTexture(Main.Textures["Day_Cloud_6"]).EncodeToPNG();
                File.WriteAllBytes(directory + "/SkyboxBackground.png", daySkybox);
                File.WriteAllBytes(directory + "/Cloud1.png", cloud1);
                File.WriteAllBytes(directory + "/Cloud2.png", cloud2);
                File.WriteAllBytes(directory + "/Cloud3.png", cloud3);
                File.WriteAllBytes(directory + "/Cloud4.png", cloud4);
                File.WriteAllBytes(directory + "/Cloud5.png", cloud5);
                File.WriteAllBytes(directory + "/Cloud6.png", cloud6);
                SkyboxData skyboxData = new SkyboxData()
                {
                    CelestialObject = "Sun",
                    CloudType = "Day"
                };
                string skyboxDataJson = JsonConvert.SerializeObject(skyboxData);
                File.WriteAllText(directory + "/SkyboxData.json", skyboxDataJson);
                string readMe = @"This file, alongside the default files in this folder (the Day skybox files) can be regenerated by deleting the CustomSkybox directory.

This folder is read once Town of Salem 2 starts. For any changes to apply, you must re-launch Town of Salem 2. If the custom skybox is broken/your game breaks when using it, likely the SkyboxData.json file was formatted incorrectly.

To change the background of the Custom skybox (like the blue sky in the Day skybox, or the orange sky in the Dawn skybox for examples), replace SkyboxBackground.png with the sky you would like to put.
Please note that the recommended filesize is 2048x2048, and that the image is curved around the map, it will not appear flat.

To change the clouds of the Custom skybox, edit the SkyboxData.json file. Here are all of the valid values and what they mean:
    ""Day"" - Uses the white clouds that the Day skybox normally uses
    ""Night"" - Uses the bluish clouds that the Night skybox normally uses
    ""Dawn"" - Uses the orange clouds that the Dawn and Dusk skyboxes normally use
    ""BloodMoon"" - Uses the red clouds that the Blood Moon skybox normally uses
    ""Storm"" - Uses the stormy clouds that the Storm skybox normally uses
    ""Greek"" - Uses the clouds that the Greek skybox normally uses
    ""Custom"" - Uses the clouds specified in the files Cloud1.png to Cloud6.png. There MUST be exactly 6 clouds, named as they currently are. (The current Cloud pngs are the ones the Day skybox uses, for reference)
    ""Invis"" - No clouds/Invisible

To change which celestial object (sun/moon) the Custom skybox has, you also have to edit the SkyboxData.json file. Here are all of the valid values and what they mean:
    ""Sun"" - Uses the default sun
    ""Moon"" - Uses the default moon
    ""BloodMoon"" - Uses the red moon that the Blood Moon skybox normally uses
    ""Eclipse"" - Uses the eclipse that the Eclipse skybox normally uses
    ""Invis"" - No celestial object/Invisible

To change the shader colors the Custom skybox has, edit the settings in Salem Mod Loader. The option to change its color will appear when you use the Custom skybox for anything.";
                File.WriteAllText(directory + "/README.txt", readMe);
            }
            try
            {
                DirectoryInfo directoryInfo = new DirectoryInfo(directory + "/");
                FileInfo[] files = (from FileInfo f in directoryInfo.GetFiles()
                                    orderby f.LastWriteTime descending
                                    select f).ToArray<FileInfo>();
                Regex cloudRegex = new Regex(@"(?<=Cloud)\d(?=\.png)", RegexOptions.RightToLeft);
                foreach (FileInfo file in files)
                {
                    if (file.FullName.EndsWith("SkyboxBackground.png"))
                    {
                        byte[] fileData = File.ReadAllBytes(file.FullName);
                        Texture2D newTexture = new Texture2D(2, 2);
                        newTexture.LoadImage(fileData);
                        newTexture.name = "Skybox_Gradient_Custom";
                        Main.Textures.Add("Skybox_Gradient_Custom", newTexture);
                    }
                    else if (file.FullName.EndsWith("SkyboxData.json"))
                    {
                        SkyboxData skyboxData = JsonConvert.DeserializeObject<SkyboxData>(File.ReadAllText(file.FullName));
                        Settings.customClouds = skyboxData.CloudType;
                        Settings.customCelestialObject = skyboxData.CelestialObject;
                    }
                    else
                    {
                        Match match = cloudRegex.Match(file.FullName);
                        if (match.Success)
                        {
                            byte[] fileData = File.ReadAllBytes(file.FullName);
                            Texture2D newTexture = new Texture2D(2, 2);
                            newTexture.LoadImage(fileData);
                            newTexture.name = "Custom_Cloud_" + match.Value;
                            Main.Textures.Add(newTexture.name, newTexture);
                        }
                    }
                }
            }
            catch
            {

            }
            try
            {
                string @string = ModSettings.GetString("Permanent Skybox", "curtis.day.night.sync");
                if (@string != "Outdated")
                {
                    ModSettings.SetString("Default Skybox", @string, "curtis.day.night.sync");
                    ModSettings.SetString("Permanent Skybox", "Outdated", "curtis.day.night.sync");
                }
            }
            catch
            {
                Console.WriteLine("If you're seeing this you aren't an OG :pensive:");
            }
            try
            {
                Settings.SettingsCache.SetValue("Default Skybox", ModSettings.GetString("Default Skybox", "curtis.day.night.sync"));
                Settings.SettingsCache.SetValue("Day Skybox", ModSettings.GetString("Day Skybox", "curtis.day.night.sync"));
                Settings.SettingsCache.SetValue("Night Skybox", ModSettings.GetString("Night Skybox", "curtis.day.night.sync"));
                Settings.SettingsCache.SetValue("Dawn Skybox", ModSettings.GetString("Dawn Skybox", "curtis.day.night.sync"));
                Settings.SettingsCache.SetValue("Dusk Skybox", ModSettings.GetString("Dusk Skybox", "curtis.day.night.sync"));
                Settings.SettingsCache.SetValue("Apocalypse Skybox", ModSettings.GetString("Apocalypse Skybox", "curtis.day.night.sync"));
                Settings.SettingsCache.SetValue("Tribunal Skybox", ModSettings.GetString("Tribunal Skybox", "curtis.day.night.sync"));
                Settings.SettingsCache.SetValue("Court Skybox", ModSettings.GetString("Court Skybox", "curtis.day.night.sync"));
                Settings.SettingsCache.SetValue("Daybreak Skybox", ModSettings.GetString("Daybreak Skybox", "curtis.day.night.sync"));
                Settings.SettingsCache.SetValue("Color Snowflakes to Shader Color", ModSettings.GetBool("Color Snowflakes to Shader Color", "curtis.day.night.sync"));
                Settings.SettingsCache.SetValue("Jail Cell Shading Mode", ModSettings.GetString("Jail Cell Shading Mode", "curtis.day.night.sync"));
                Settings.SettingsCache.SetValue("Random Sky Mode", ModSettings.GetString("Random Sky Mode", "curtis.day.night.sync"));
                Settings.SettingsCache.SetValue("Random Sky Wait in Seconds", (float)ModSettings.GetInt("Random Sky Wait", "curtis.day.night.sync"));
                Settings.ColorCache.SetValue("Day Shader Color", ModSettings.GetColor("Day Shader Color", "curtis.day.night.sync"));
                Settings.ColorCache.SetValue("Day Shader Color (Night)", ModSettings.GetColor("Day Shader Color (Night)", "curtis.day.night.sync"));
                Settings.ColorCache.SetValue("Night Shader Color", ModSettings.GetColor("Night Shader Color", "curtis.day.night.sync"));
                Settings.ColorCache.SetValue("Night Shader Color (Night)", ModSettings.GetColor("Night Shader Color (Night)", "curtis.day.night.sync"));
                Settings.ColorCache.SetValue("Dawn Shader Color", ModSettings.GetColor("Dawn Shader Color", "curtis.day.night.sync"));
                Settings.ColorCache.SetValue("Dawn Shader Color (Night)", ModSettings.GetColor("Dawn Shader Color (Night)", "curtis.day.night.sync"));
                Settings.ColorCache.SetValue("Dusk Shader Color", ModSettings.GetColor("Dusk Shader Color", "curtis.day.night.sync"));
                Settings.ColorCache.SetValue("Dusk Shader Color (Night)", ModSettings.GetColor("Dusk Shader Color (Night)", "curtis.day.night.sync"));
                Settings.ColorCache.SetValue("Blood Moon Shader Color", ModSettings.GetColor("Blood Moon Shader Color", "curtis.day.night.sync"));
                Settings.ColorCache.SetValue("Blood Moon Shader Color (Night)", ModSettings.GetColor("Blood Moon Shader Color (Night)", "curtis.day.night.sync"));
                Settings.ColorCache.SetValue("Storm Shader Color", ModSettings.GetColor("Storm Shader Color", "curtis.day.night.sync"));
                Settings.ColorCache.SetValue("Storm Shader Color (Night)", ModSettings.GetColor("Storm Shader Color (Night)", "curtis.day.night.sync"));
                Settings.ColorCache.SetValue("Eclipse Shader Color", ModSettings.GetColor("Eclipse Shader Color", "curtis.day.night.sync"));
                Settings.ColorCache.SetValue("Eclipse Shader Color (Night)", ModSettings.GetColor("Eclipse Shader Color (Night)", "curtis.day.night.sync"));
                Settings.ColorCache.SetValue("Winter Shader Color", ModSettings.GetColor("Winter Shader Color", "curtis.day.night.sync"));
                Settings.ColorCache.SetValue("Winter Shader Color (Night)", ModSettings.GetColor("Winter Shader Color (Night)", "curtis.day.night.sync"));
                Settings.ColorCache.SetValue("Greek Shader Color", ModSettings.GetColor("Greek Shader Color", "curtis.day.night.sync"));
                Settings.ColorCache.SetValue("Greek Shader Color (Night)", ModSettings.GetColor("Greek Shader Color (Night)", "curtis.day.night.sync"));
                Settings.ColorCache.SetValue("Mafia Shader Color", ModSettings.GetColor("Mafia Shader Color", "curtis.day.night.sync"));
                Settings.ColorCache.SetValue("Mafia Shader Color (Night)", ModSettings.GetColor("Mafia Shader Color (Night)", "curtis.day.night.sync"));
                Settings.ColorCache.SetValue("Void Shader Color", ModSettings.GetColor("Void Shader Color", "curtis.day.night.sync"));
                Settings.ColorCache.SetValue("Void Shader Color (Night)", ModSettings.GetColor("Void Shader Color (Night)", "curtis.day.night.sync"));
                Settings.ColorCache.SetValue("Custom Skybox Shader Color", ModSettings.GetColor("Custom Skybox Shader Color", "curtis.day.night.sync"));
                Settings.ColorCache.SetValue("Custom Skybox Shader Color (Night)", ModSettings.GetColor("Custom Skybox Shader Color (Night)", "curtis.day.night.sync"));
                Settings.ColorCache.SetValue("Jail Cell Shader Color", ModSettings.GetColor("Jail Cell Shader Color", "curtis.day.night.sync"));
            }
            catch
            {
            }
            Service.Home.ApplicationService.OnSceneLoaded += delegate (SceneType sceneType, LoadSceneMode loadSceneMode)
            {
                if (Main.Snowflakes == null && (sceneType == SceneType.MAP || sceneType == SceneType.GAME) && Service.Home.Customizations.myCustomizationSelections.Data.mapId == 2)
                {
                    Main.Snowflakes = GameObject.Find("SceneRoot/Snow_Particles").GetComponent<ParticleSystem>();
                }
                if (SkyInfo.Instance)
                {
                    SkyInfo.Instance.Pest = 0;
                    SkyInfo.Instance.Famine = 0;
                    SkyInfo.Instance.War = 0;
                    SkyInfo.Instance.Death = 0;
                    ApocalypseSwap.processedList.Clear();
                    if (Leo.IsHomeScene())
                    {
                        if (!Main.DidRandom)
                        {
                            Main.DidRandom = true;
                            this.Corotine = this.RandomSkyWaitCoroutine();
                            ApplicationController.ApplicationContext.StartCoroutine(this.Corotine);
                        }
                        SkyInfo.Phase = "NotGame";
                        switch (SkyInfo.Instance.GetCurrentSkyType())
                        {
                            case SkyInfo.SkyType.Day:
                                SkyInfo.Instance.UpdateIntroClouds("Day");
                                break;
                            case SkyInfo.SkyType.Night:
                                SkyInfo.Instance.UpdateIntroClouds("Night");
                                break;
                            case SkyInfo.SkyType.Dawn:
                                SkyInfo.Instance.UpdateIntroClouds("Dawn");
                                break;
                            case SkyInfo.SkyType.Dusk:
                                SkyInfo.Instance.UpdateIntroClouds("Dawn");
                                break;
                            case SkyInfo.SkyType.BloodMoon:
                                SkyInfo.Instance.UpdateIntroClouds("BloodMoon");
                                break;
                            case SkyInfo.SkyType.Storm:
                                SkyInfo.Instance.UpdateIntroClouds("Storm");
                                break;
                            case SkyInfo.SkyType.Eclipse:
                                SkyInfo.Instance.UpdateIntroClouds("Invis");
                                break;
                            case SkyInfo.SkyType.Winter:
                                SkyInfo.Instance.UpdateIntroClouds("Invis");
                                break;
                            case SkyInfo.SkyType.Greek:
                                SkyInfo.Instance.UpdateIntroClouds("Day");
                                break;
                            case SkyInfo.SkyType.Mafia:
                                SkyInfo.Instance.UpdateIntroClouds("Invis");
                                break;
                            case SkyInfo.SkyType.Void:
                                SkyInfo.Instance.UpdateIntroClouds("Invis");
                                break;
                            case SkyInfo.SkyType.Custom:
                                SkyInfo.Instance.UpdateIntroClouds(Settings.customClouds);
                                break;
                        }
                    }
                    else if (Leo.IsGameScene())
                    {
                        if (!Main.DidRandom)
                        {
                            Main.DidRandom = true;
                            this.Corotine = this.RandomSkyWaitCoroutine();
                            ApplicationController.ApplicationContext.StartCoroutine(this.Corotine);
                        }
                        SkyInfo.Phase = "Day";
                    }
                    SkyInfo.Instance.UpdateSky();
                }
            };
        }

        // Token: 0x0600000C RID: 12
        public IEnumerator<WaitForSeconds> RandomSkyWaitCoroutine()
        {
            for (; ; )
            {
                yield return new WaitForSeconds((float)Settings.SettingsCache.GetValue("Random Sky Wait in Seconds", null));
                if ((string)Settings.SettingsCache.GetValue("Random Sky Mode", null) == "Time in Seconds" && SkyInfo.Instance != null)
                {
                    Settings.SettingsCache.SetValue("Current Random Sky", SkyInfo.Instance.RandomSkyTypeAsString());
                    if (Leo.IsHomeScene())
                    {
                        SkyInfo.Instance.UpdateSky();
                    }
                }
            }
            yield break;
        }

        // Token: 0x04000002 RID: 2
        public static Dictionary<string, Texture2D> Textures = new Dictionary<string, Texture2D>();

        // Token: 0x04000003 RID: 3
        public static ParticleSystem Snowflakes;

        // Token: 0x04000004 RID: 4
        public IEnumerator<WaitForSeconds> Corotine;

        public static bool DidRandom = false;
    }
}
